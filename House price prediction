# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Sample data for demonstration
# You should replace this with your actual dataset
# Sample features: house size in square feet
X = np.array([1000, 1500, 2000, 2500, 3000]).reshape(-1, 1)
# Sample labels: corresponding house prices in dollars
y = np.array([300000, 400000, 500000, 600000, 700000])

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression using scikit-learn
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)

# Printing Linear Regression results
print("Linear Regression Results:")
print("Coefficients:", lin_reg.coef_)
print("Intercept:", lin_reg.intercept_)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_lin))

# Neural Network using TensorFlow
model = Sequential([
    Dense(64, activation='relu', input_shape=[1]),
    Dense(64, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')

# Training the model
model.fit(X_train, y_train, epochs=500, verbose=0)

# Evaluating the model
y_pred_nn = model.predict(X_test)

# Printing Neural Network results
print("\nNeural Network Results:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_nn))

# Plotting the results
plt.scatter(X_test, y_test, color='black')
plt.plot(X_test, y_pred_lin, color='blue', label='Linear Regression')
plt.plot(X_test, y_pred_nn, color='red', label='Neural Network')
plt.xlabel('House Size (sqft)')
plt.ylabel('House Price ($)')
plt.title('House Price Prediction')
plt.legend()
plt.show()
